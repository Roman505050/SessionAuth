services:
  rest-api:
    build:
      context: .
      dockerfile: src/api/rest/Dockerfile
    image: rest-api
    command: uvicorn api.rest.main:app --host 0.0.0.0 --port 8000
    ports:
      - "8000:8000"
    volumes:
      - ./.env:/rest-api/.env
    depends_on:
      - postgres
      - redis
      - email-service
      - rabbitmq

  email-service:
    build:
      context: .
      dockerfile: src/services/email/Dockerfile
    image: email-service
    command: python -m services.email.main
    depends_on:
      - rabbitmq

  postgres:
    image: postgres:13
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    ports:
      - "5432:5432"
    volumes:
      - postgres-data:/var/lib/postgresql/data
    restart: always
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}" ]
      interval: 10s
      retries: 5
      start_period: 30s
      timeout: 10s

  redis:
    image: redis:6
    ports:
      - "6379:6379"
    environment:
      - REDIS_USERNAME=${REDIS_USERNAME}
      - REDIS_PASSWORD=${REDIS_PASSWORD}
    command: >
      redis-server --requirepass ${REDIS_PASSWORD}
      --user ${REDIS_USERNAME} on +@all >${REDIS_PASSWORD}
    volumes:
      - redis-data:/data
    restart: always

  rabbitmq:
    image: rabbitmq:3-management
    ports:
      - "5672:5672"
      - "15672:15672"
    environment:
      RABBITMQ_DEFAULT_USER: ${RABBITMQ_DEFAULT_USER}
      RABBITMQ_DEFAULT_PASS: ${RABBITMQ_DEFAULT_PASS}
    volumes:
      - rabbitmq-data:/var/lib/rabbitmq
    restart: always

networks:
    app-network:
        driver: bridge

volumes:
    postgres-data:
    redis-data:
    rabbitmq-data: