services:
  rest-api:
    build:
      context: .
      dockerfile: ./src/api/rest/Dockerfile
    command: uvicorn api.rest.main:app --host 0.0.0.0 --port 8000
    volumes:
      - ./.env:/rest-api/.env
    ports:
      - "8000:8000"
    networks:
      - app-network
    depends_on:
      - postgres
      - rabbitmq
      - email-service
    restart: always

  email-service:
    build:
      context: .
      dockerfile: ./src/services/email/Dockerfile
    command: python -m services.email.main
    volumes:
      - ./.env:/email-service/.env
    networks:
      - app-network
    depends_on:
      postgres:
        condition: service_healthy
      rabbitmq:
        condition: service_started
    restart: always

  rabbitmq:
    image: rabbitmq:3-management
    environment:
      RABBITMQ_DEFAULT_USER: ${RABBITMQ_DEFAULT_USER}
      RABBITMQ_DEFAULT_PASS: ${RABBITMQ_DEFAULT_PASS}
    ports:
      - "15672:15672"
#      - "5672:5672"
    networks:
      - app-network
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq/
    restart: always

  postgres:
    image: postgres:13
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    ports:
      - "5432:5432"
    networks:
        - app-network
    volumes:
      - postgres_data:/var/lib/postgresql/data
    restart: always
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}" ]
      interval: 10s
      retries: 5
      start_period: 30s
      timeout: 10s

networks:
    app-network:
        driver: bridge

volumes:
    postgres_data:
    rabbitmq_data:
